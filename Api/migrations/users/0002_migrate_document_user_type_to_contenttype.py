# Generated by Django 5.2.4 on 2025-10-03 08:59

from django.db import migrations, models
import django.db.models.deletion


def migrate_document_user_type_to_contenttype(apps, schema_editor):
    """
    Migre les données de user_type (CharField) vers user_type_id (ForeignKey ContentType)
    """
    ContentType = apps.get_model('contenttypes', 'ContentType')
    db_alias = schema_editor.connection.alias

    # Obtenir les ContentTypes pour UserDriver et UserCustomer
    try:
        driver_ct = ContentType.objects.using(db_alias).get(app_label='users', model='userdriver')
        customer_ct = ContentType.objects.using(db_alias).get(app_label='users', model='usercustomer')
    except ContentType.DoesNotExist:
        print("Warning: ContentTypes for UserDriver or UserCustomer not found. Skipping migration.")
        return

    # Utiliser du SQL brut pour migrer les données
    with schema_editor.connection.cursor() as cursor:
        # Migrer les documents de type 'driver'
        cursor.execute(
            "UPDATE documents SET user_type_id = %s WHERE old_user_type = 'driver'",
            [driver_ct.id]
        )
        # Migrer les documents de type 'customer'
        cursor.execute(
            "UPDATE documents SET user_type_id = %s WHERE old_user_type = 'customer'",
            [customer_ct.id]
        )


class Migration(migrations.Migration):

    dependencies = [
        ('users', '0001_initial'),
        ('contenttypes', '0001_initial'),
    ]

    operations = [
        # 1. Renommer la colonne user_type en old_user_type via SQL brut
        migrations.RunSQL(
            sql='ALTER TABLE documents RENAME COLUMN user_type TO old_user_type;',
            reverse_sql='ALTER TABLE documents RENAME COLUMN old_user_type TO user_type;'
        ),
        # 2. Ajouter le nouveau champ user_type_id comme ForeignKey
        migrations.RunSQL(
            sql='ALTER TABLE documents ADD COLUMN user_type_id INTEGER NULL REFERENCES django_content_type(id) ON DELETE CASCADE;',
            reverse_sql='ALTER TABLE documents DROP COLUMN user_type_id;'
        ),
        # 3. Migrer les données
        migrations.RunPython(migrate_document_user_type_to_contenttype, reverse_code=migrations.RunPython.noop),
        # 4. Rendre le champ non nullable
        migrations.RunSQL(
            sql='ALTER TABLE documents ALTER COLUMN user_type_id SET NOT NULL;',
            reverse_sql='ALTER TABLE documents ALTER COLUMN user_type_id DROP NOT NULL;'
        ),
        # 5. Supprimer l'ancien champ old_user_type
        migrations.RunSQL(
            sql='ALTER TABLE documents DROP COLUMN old_user_type;',
            reverse_sql='ALTER TABLE documents ADD COLUMN old_user_type VARCHAR(10);'
        ),
    ]
