# Generated by Django 5.2.6 on 2025-10-03 07:12

import django.core.validators
import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '0003_create_vip_zones_tables'),
        ('users', '0001_initial'),
        ('vehicles', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='PaymentMethod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('CASH', 'Espèces'), ('OM', 'Orange Money'), ('MOMO', 'MTN Mobile Money'), ('WALLET', 'Portefeuille')], max_length=20, unique=True, verbose_name='Type de paiement')),
                ('name', models.CharField(max_length=100, verbose_name='Nom affiché')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('icon', models.CharField(blank=True, max_length=255, verbose_name='Icône')),
                ('is_active', models.BooleanField(default=True, verbose_name='Actif')),
                ('min_amount', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='Montant minimum')),
                ('max_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Montant maximum')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Mis à jour le')),
            ],
            options={
                'verbose_name': 'Méthode de paiement',
                'verbose_name_plural': 'Méthodes de paiement',
                'db_table': 'payment_methods',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('pickup_address', models.TextField(verbose_name='Adresse de départ')),
                ('pickup_latitude', models.DecimalField(decimal_places=8, max_digits=10, verbose_name='Latitude départ')),
                ('pickup_longitude', models.DecimalField(decimal_places=8, max_digits=11, verbose_name='Longitude départ')),
                ('destination_address', models.TextField(verbose_name='Adresse de destination')),
                ('destination_latitude', models.DecimalField(decimal_places=8, max_digits=10, verbose_name='Latitude destination')),
                ('destination_longitude', models.DecimalField(decimal_places=8, max_digits=11, verbose_name='Longitude destination')),
                ('payment_status', models.CharField(choices=[('PENDING', 'En attente'), ('PROCESSING', 'En traitement'), ('PAID', 'Payé'), ('FAILED', 'Échoué'), ('REFUNDED', 'Remboursé')], default='PENDING', max_length=20, verbose_name='Statut du paiement')),
                ('estimated_distance_km', models.DecimalField(decimal_places=2, max_digits=8, verbose_name='Distance estimée (km)')),
                ('actual_distance_km', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True, verbose_name='Distance réelle (km)')),
                ('base_price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Prix de base')),
                ('distance_price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Prix distance')),
                ('vehicle_additional_price', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='Prix additionnel véhicule')),
                ('city_price', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='Prix ville')),
                ('vip_zone_price', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='Prix zone VIP')),
                ('waiting_price', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='Prix attente')),
                ('total_price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Prix total estimé')),
                ('final_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Prix final ajusté')),
                ('waiting_time', models.IntegerField(default=0, help_text="Temps d'attente du client après l'arrivée du chauffeur", verbose_name="Temps d'attente (minutes)")),
                ('driver_rating', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Note du chauffeur (1-5)')),
                ('customer_rating', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Note du client (1-5)')),
                ('is_night_fare', models.BooleanField(default=False, verbose_name='Tarif nuit')),
                ('status', models.CharField(choices=[('DRAFT', 'Brouillon'), ('PENDING', 'En attente'), ('ACCEPTED', 'Acceptée'), ('DRIVER_ARRIVED', 'Chauffeur arrivé'), ('IN_PROGRESS', 'En cours'), ('COMPLETED', 'Terminée'), ('CANCELLED', 'Annulée')], default='DRAFT', max_length=20, verbose_name='Statut')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Créée le')),
                ('accepted_at', models.DateTimeField(blank=True, null=True, verbose_name='Acceptée le')),
                ('driver_arrived_at', models.DateTimeField(blank=True, null=True, verbose_name='Chauffeur arrivé le')),
                ('started_at', models.DateTimeField(blank=True, null=True, verbose_name='Démarrée le')),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='Terminée le')),
                ('cancelled_at', models.DateTimeField(blank=True, null=True, verbose_name='Annulée le')),
                ('paid_at', models.DateTimeField(blank=True, null=True, verbose_name='Payée le')),
                ('customer_notes', models.TextField(blank=True, verbose_name='Notes client')),
                ('driver_notes', models.TextField(blank=True, verbose_name='Notes chauffeur')),
                ('cancellation_reason', models.TextField(blank=True, verbose_name="Raison d'annulation")),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.city', verbose_name='Ville')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='orders', to='users.usercustomer')),
                ('driver', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='orders', to='users.userdriver')),
                ('vehicle_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vehicles.vehicletype', verbose_name='Type de véhicule')),
                ('vip_zone', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.vipzoneproxy', verbose_name='Zone VIP')),
                ('payment_method', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='order.paymentmethod', verbose_name='Méthode de paiement')),
            ],
            options={
                'verbose_name': 'Commande',
                'verbose_name_plural': 'Commandes',
                'db_table': 'orders',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Rating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating_type', models.CharField(choices=[('DRIVER_TO_CUSTOMER', 'Chauffeur → Client'), ('CUSTOMER_TO_DRIVER', 'Client → Chauffeur')], max_length=20, verbose_name='Type de notation')),
                ('score', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Note (1-5 étoiles)')),
                ('comment', models.TextField(blank=True, verbose_name='Commentaire')),
                ('punctuality', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Ponctualité')),
                ('driving_quality', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Qualité de conduite')),
                ('vehicle_cleanliness', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Propreté du véhicule')),
                ('communication', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Communication')),
                ('tags', models.JSONField(blank=True, default=list, help_text="Ex: ['Ponctuel', 'Véhicule propre', 'Conduite sûre']", verbose_name='Tags')),
                ('is_anonymous', models.BooleanField(default=False, verbose_name='Note anonyme')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Mis à jour le')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ratings', to='order.order')),
                ('rated_customer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ratings_received', to='users.usercustomer')),
                ('rated_driver', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ratings_received', to='users.userdriver')),
                ('rater', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ratings_given', to='users.userdriver')),
            ],
            options={
                'verbose_name': 'Notation',
                'verbose_name_plural': 'Notations',
                'db_table': 'ratings',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TripTracking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('latitude', models.DecimalField(decimal_places=8, max_digits=10, verbose_name='Latitude')),
                ('longitude', models.DecimalField(decimal_places=8, max_digits=11, verbose_name='Longitude')),
                ('speed_kmh', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='Vitesse (km/h)')),
                ('heading', models.IntegerField(blank=True, null=True, verbose_name='Direction (0-359°)')),
                ('accuracy', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True, verbose_name='Précision GPS (mètres)')),
                ('order_status', models.CharField(choices=[('DRAFT', 'Brouillon'), ('PENDING', 'En attente'), ('ACCEPTED', 'Acceptée'), ('DRIVER_ARRIVED', 'Chauffeur arrivé'), ('IN_PROGRESS', 'En cours'), ('COMPLETED', 'Terminée'), ('CANCELLED', 'Annulée')], max_length=20, verbose_name='Statut de la commande')),
                ('recorded_at', models.DateTimeField(auto_now_add=True, verbose_name='Enregistré le')),
                ('driver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trip_tracking', to='users.userdriver')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trip_tracking', to='order.order')),
            ],
            options={
                'verbose_name': 'Suivi GPS',
                'verbose_name_plural': 'Suivis GPS',
                'db_table': 'trip_tracking',
                'ordering': ['order', 'recorded_at'],
            },
        ),
        migrations.CreateModel(
            name='DriverStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('OFFLINE', 'Hors ligne'), ('ONLINE', 'En ligne'), ('BUSY', 'Occupé')], default='OFFLINE', max_length=10, verbose_name='Statut')),
                ('current_latitude', models.DecimalField(blank=True, decimal_places=8, max_digits=10, null=True, verbose_name='Latitude actuelle')),
                ('current_longitude', models.DecimalField(blank=True, decimal_places=8, max_digits=11, null=True, verbose_name='Longitude actuelle')),
                ('last_location_update', models.DateTimeField(blank=True, null=True, verbose_name='Dernière MAJ position')),
                ('websocket_channel', models.CharField(blank=True, max_length=255, null=True, verbose_name='Canal WebSocket')),
                ('session_started_at', models.DateTimeField(blank=True, null=True, verbose_name='Session démarrée le')),
                ('total_orders_today', models.IntegerField(default=0, verbose_name="Commandes aujourd'hui")),
                ('total_earnings_today', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name="Gains aujourd'hui")),
                ('last_online', models.DateTimeField(blank=True, null=True, verbose_name='Dernière connexion')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Mis à jour le')),
                ('driver', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='status', to='users.userdriver')),
            ],
            options={
                'verbose_name': 'Statut Chauffeur',
                'verbose_name_plural': 'Statuts Chauffeurs',
                'db_table': 'driver_status',
                'indexes': [models.Index(fields=['status'], name='driver_stat_status_9ca853_idx'), models.Index(fields=['current_latitude', 'current_longitude'], name='driver_stat_current_3eac3e_idx')],
            },
        ),
        migrations.CreateModel(
            name='DriverPool',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('priority_order', models.IntegerField(help_text='1 = premier appelé, 2 = deuxième, etc.', verbose_name='Ordre de priorité')),
                ('distance_km', models.DecimalField(decimal_places=2, max_digits=6, verbose_name='Distance du client (km)')),
                ('request_status', models.CharField(choices=[('PENDING', 'En attente'), ('ACCEPTED', 'Accepté'), ('REJECTED', 'Refusé'), ('TIMEOUT', 'Timeout'), ('CANCELLED', 'Annulé')], default='PENDING', max_length=20, verbose_name='Statut de la requête')),
                ('requested_at', models.DateTimeField(auto_now_add=True, verbose_name='Demandé le')),
                ('responded_at', models.DateTimeField(blank=True, null=True, verbose_name='Répondu le')),
                ('timeout_at', models.DateTimeField(verbose_name='Timeout le')),
                ('response_time_seconds', models.IntegerField(blank=True, null=True, verbose_name='Temps de réponse (secondes)')),
                ('rejection_reason', models.CharField(blank=True, max_length=255, verbose_name='Raison du refus')),
                ('driver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pool_requests', to='users.userdriver')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='driver_pool', to='order.order')),
            ],
            options={
                'verbose_name': 'Pool Chauffeur',
                'verbose_name_plural': 'Pool Chauffeurs',
                'db_table': 'driver_pool',
                'ordering': ['order', 'priority_order'],
                'indexes': [models.Index(fields=['order', 'priority_order'], name='driver_pool_order_i_86c22f_idx'), models.Index(fields=['request_status'], name='driver_pool_request_246954_idx')],
                'unique_together': {('order', 'driver')},
            },
        ),
        migrations.CreateModel(
            name='CustomerStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('current_latitude', models.DecimalField(blank=True, decimal_places=8, max_digits=10, null=True, verbose_name='Latitude actuelle')),
                ('current_longitude', models.DecimalField(blank=True, decimal_places=8, max_digits=11, null=True, verbose_name='Longitude actuelle')),
                ('last_location_update', models.DateTimeField(blank=True, null=True, verbose_name='Dernière MAJ position')),
                ('websocket_channel', models.CharField(blank=True, max_length=255, null=True, verbose_name='Canal WebSocket')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Mis à jour le')),
                ('customer', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='status', to='users.usercustomer')),
                ('current_order', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='customer_tracking', to='order.order', verbose_name='Commande active')),
            ],
            options={
                'verbose_name': 'Statut Client',
                'verbose_name_plural': 'Statuts Clients',
                'db_table': 'customer_status',
                'indexes': [models.Index(fields=['current_latitude', 'current_longitude'], name='customer_st_current_95680b_idx'), models.Index(fields=['current_order'], name='customer_st_current_d366ef_idx')],
            },
        ),
        migrations.CreateModel(
            name='OrderTracking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_type', models.CharField(choices=[('ORDER_CREATED', 'Commande créée'), ('DRIVER_SEARCH_STARTED', 'Recherche chauffeur démarrée'), ('DRIVER_NOTIFIED', 'Chauffeur notifié'), ('DRIVER_ACCEPTED', 'Chauffeur a accepté'), ('DRIVER_REJECTED', 'Chauffeur a refusé'), ('DRIVER_ASSIGNED', 'Chauffeur assigné'), ('DRIVER_EN_ROUTE', 'Chauffeur en route'), ('DRIVER_ARRIVED', 'Chauffeur arrivé'), ('TRIP_STARTED', 'Course démarrée'), ('TRIP_COMPLETED', 'Course terminée'), ('ORDER_CANCELLED', 'Commande annulée'), ('PAYMENT_INITIATED', 'Paiement initié'), ('PAYMENT_COMPLETED', 'Paiement complété'), ('PAYMENT_FAILED', 'Paiement échoué'), ('RATING_SUBMITTED', 'Note soumise'), ('LOCATION_UPDATE', 'MAJ position')], max_length=30, verbose_name="Type d'événement")),
                ('latitude', models.DecimalField(blank=True, decimal_places=8, max_digits=10, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=8, max_digits=11, null=True)),
                ('metadata', models.JSONField(blank=True, default=dict, verbose_name='Métadonnées')),
                ('notes', models.TextField(blank=True, verbose_name='Notes')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
                ('customer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='users.usercustomer')),
                ('driver', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='users.userdriver')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tracking_events', to='order.order')),
            ],
            options={
                'verbose_name': 'Suivi Commande',
                'verbose_name_plural': 'Suivi Commandes',
                'db_table': 'order_tracking',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['order', '-created_at'], name='order_track_order_i_5a6800_idx'), models.Index(fields=['event_type'], name='order_track_event_t_062397_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['-created_at'], name='orders_created_b25042_idx'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['status'], name='orders_status_762191_idx'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['customer'], name='orders_custome_6c3a7f_idx'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['driver'], name='orders_driver__f31fef_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='rating',
            unique_together={('order', 'rating_type')},
        ),
        migrations.AddIndex(
            model_name='triptracking',
            index=models.Index(fields=['order', 'recorded_at'], name='trip_tracki_order_i_d1cfe3_idx'),
        ),
        migrations.AddIndex(
            model_name='triptracking',
            index=models.Index(fields=['latitude', 'longitude'], name='trip_tracki_latitud_9e308f_idx'),
        ),
    ]
