#!/usr/bin/env python3
"""
Commande Django pour initialiser les configurations par d√©faut de Woil√†
"""
from django.core.management.base import BaseCommand
from django.core.management import call_command
from api.models import GeneralConfig


class Command(BaseCommand):
    help = 'üîß Initialise les configurations par d√©faut de Woil√†'

    def add_arguments(self, parser):
        parser.add_argument(
            '--force',
            action='store_true',
            help='Force la r√©initialisation m√™me si des configurations existent d√©j√†',
        )
        parser.add_argument(
            '--verbose',
            action='store_true',
            help='Affichage d√©taill√©',
        )

    def handle(self, *args, **options):
        """Ex√©cute la commande d'initialisation"""
        
        force = options.get('force', False)
        verbose = options.get('verbose', False)
        
        # V√©rifier si des configurations existent d√©j√†
        existing_configs = GeneralConfig.objects.count()
        
        if existing_configs > 0 and not force:
            self.stdout.write(
                self.style.WARNING(
                    f"‚ö†Ô∏è  {existing_configs} configuration(s) d√©j√† pr√©sente(s). "
                    f"Utilisez --force pour r√©initialiser."
                )
            )
            return
        
        if force and existing_configs > 0:
            if verbose:
                self.stdout.write(
                    self.style.WARNING(
                        f"üóëÔ∏è  Suppression de {existing_configs} configuration(s) existante(s)..."
                    )
                )
            GeneralConfig.objects.all().delete()
        
        # Charger les fixtures
        self.stdout.write("üîß Chargement des configurations par d√©faut...")
        
        try:
            call_command('loaddata', 'default_configs', verbosity=0)
            
            # V√©rifier le r√©sultat
            new_count = GeneralConfig.objects.count()
            
            self.stdout.write(
                self.style.SUCCESS(
                    f"‚úÖ {new_count} configuration(s) charg√©e(s) avec succ√®s!"
                )
            )
            
            if verbose:
                self.stdout.write("\nüìã Configurations charg√©es:")
                for config in GeneralConfig.objects.all().order_by('search_key'):
                    status = "‚úÖ" if config.active else "‚ùå"
                    self.stdout.write(
                        f"  {status} {config.nom} = {config.valeur}"
                    )
                
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(
                    f"‚ùå Erreur lors du chargement des configurations: {e}"
                )
            )